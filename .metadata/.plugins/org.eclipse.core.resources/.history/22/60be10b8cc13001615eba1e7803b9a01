
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;

import org.xml.sax.helpers.DefaultHandler;

import com.mysql.jdbc.ResultSet;
import com.mysql.jdbc.Statement;

/*
 * movies, stars, and genres
 * stars_in_movies and genres_in_movies
 */
public class SaxParserMain<a> extends DefaultHandler {

	@SuppressWarnings("rawtypes")
	List myMovies;
	List myBadMovies;
	List catInMovies;
	Set genres;

	List myActors;
	List myBadActors;

	
	Map<String, List> movieToActors;
	private String tempVal;

	// to maintain context
	private Movie tempMovie;
	// to maintain context
	private Star tempStar;

	HashMap movieToId;

	String dbName = "moviedb";
	String dbUser = "root";
	String dbPW = "pops711";

	// Movie - > Stars
	String movie;
	List actorsIn;
	String tmpDirector;

	public SaxParserMain() {
		myMovies = new ArrayList();
		myBadMovies = new ArrayList();
		catInMovies = new ArrayList();
		genres = new HashSet();

		myActors = new ArrayList<>();
		myBadActors = new ArrayList();

		ArrayList<Star> a= new ArrayList<Star>();
		movieToActors = new HashMap<String, List>();

		movie = "";
		actorsIn = new ArrayList();
		movieToId = new HashMap<>();
		tmpDirector = "";
	}

	public void runMovies() {
		parseMovieDocument();
		printMovieData();

		parseStarDocument();
		// printStarData();

		parseMovieStarDocument();
		// printMovieStarData();

		try {
			insertIntoDB();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void insertIntoDB() throws SQLException {

		System.out.println("Inserting Batch");

		// Incorporate mySQL driver
		try {
			Class.forName("com.mysql.jdbc.Driver").newInstance();
		} catch (InstantiationException | IllegalAccessException | ClassNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		Connection connection = null;
		try {
			connection = DriverManager.getConnection("jdbc:mysql:///moviedb", dbUser, dbPW);
		} catch (SQLException e) {
			System.out.println("Connection Invalid");
		}
		connection.setAutoCommit(false);

		// Start of Parse

		String[] tblName = { "genres", "stars", "movies" };

		StringBuilder tmp = new StringBuilder("INSERT INTO movies (title,year,director) VALUES ");

		java.sql.Statement s = connection.createStatement();
		// java.sql.Statement s2 = connection.createStatement();

		Iterator movies = myMovies.iterator();
		StringBuilder tmpG = new StringBuilder("INSERT INTO genres_in_movies VALUES ");
		// StringBuilder tmpS = new StringBuilder((String) ("INSERT INTO
		// stars_in_movies (star_id, movie_id) "
		// + " SELECT s.id, m.id " + " FROM movies AS m,stars AS s WHERE "));
		
		// System.out.println(tmpS);

		int cnt = -1;
		while (movies.hasNext()) {
			Movie movie = (Movie) movies.next();
			String[] specialS = { "title", "year", "director" };
			String[] vals = { movie.getTitle(), Integer.toString(movie.getYear()), movie.getDirector() };
			// tmp.append("('" + vals[0] + "','" + vals[1] + "','" + vals[2] +
			// "')");
			if (cnt == -1) {
				tmp.append("('" + movie.getTitle() + "'," + vals[1] + ",'" + vals[2] + "')");
				cnt = 0;
			} else
				tmp.append("," + "('" + movie.getTitle() + "'," + vals[1] + ",'" + vals[2] + "')");
			List<String> actors = (List) movieToActors.get(movie.getTitle());
			
			// if (actors != null) {
			//
			// for (int i = 0; i < actors.size(); ++i) {
			// actor_f = ((String) actors.get(i)).split("\\s+");
			// }
			// if (actor_f.length == 1) {
			// if(cnt>0)
			// tmpS.append(" OR ");
			// tmpS.append("(s.last_name='"+actor_f[0]+"' AND
			// m.title='"+movie.getTitle()+"')");
			//
			//// tmpG.append("(s.last_name='actor_f[0]' AND
			// m.title='movie.getTitle()';)");
			// }
			// else if(actor_f.length > 1)
			// {
			// String fn=actor_f[0];
			// String ln=actor_f[1];
			// for(int j=2; j<actor_f.length;++j)
			// {
			// ln+=" "+actor_f[j];
			// }
			// if(cnt>0)
			// tmpS.append(" OR ");
			// tmpS.append("(s.last_name='"+ln+"' AND "+"s.first_name='"+fn+"'
			// AND m.title='"+movie.getTitle()+"')");
			// }
			//
			// if(++cnt>100)
			// {
			// tmpS.append(";\n");
			//
			//
			// tmpS.append("INSERT INTO stars_in_movies (star_id, movie_id) "
			// + " SELECT s.id, m.id " + " FROM movies AS m,stars AS s WHERE ");
			// cnt=0;
			//
			// }
			// }
			//////////

			// // System.out.println(tmp2);
			// s.addBatch(tmp2);
			// }
			// List actors = (List) movieActors.get(movie.getTitle());
			// // System.out.println(a);
			// if (actors != null)
			// for (int i = 0; i < actors.size(); ++i) {
			// String[] actor_f = ((String) actors.get(i)).split("\\s+");
			// // System.out.println( actors.get(i));
			// String tmp3 = "";
			// if (actor_f.length == 1) {
			// tmp3 = "INSERT INTO stars_in_movies (star_id, movie_id) " +
			// "SELECT s.id, m.id "
			// + "FROM movies AS m,stars AS s " + "WHERE s.last_name='" +
			// actor_f[0] + "'" + " AND "
			// + " m.title='" + movie.getTitle() + "';";
			// // System.out.println(tmp3);
			// } else if (actor_f.length > 1) {
			// String fn = actor_f[0];
			// String ln = actor_f[1];
			// for (int j = 2; j < actor_f.length; ++j) {
			// ln = " " + actor_f[j];
			// }
			// tmp3 = "INSERT INTO stars_in_movies (star_id, movie_id) " +
			// "SELECT s.id, m.id "
			// + "FROM movies AS m,stars AS s " + "WHERE s.last_name='" + fn +
			// "'" + " AND "
			// + "s.first_name='" + ln + "' AND " + " m.title='" +
			// movie.getTitle() + "';";
			// // System.out.println(tmp3);
			// }
			//
			// s.addBatch(tmp3);
			// }

		}
		tmp.append(";");
	

		s.addBatch(tmp.toString());

		try {
			s.executeBatch();
			connection.commit();

		} catch (SQLException e) {
			e.printStackTrace();
		}

		// Insert Genres

		tmp = new StringBuilder("INSERT INTO genres (name) VALUES ");
		Iterator names = genres.iterator();
		if (names.hasNext()) {

			String name = names.next().toString();

			tmp.append("('" + name + "')");
		}

		while (names.hasNext()) {
			String name = names.next().toString();

			tmp.append("," + "('" + name + "')");

		}
		tmp.append(";");
		// System.out.println(tmp);
		s.addBatch(tmp.toString());
		try {
			s.executeBatch();
			connection.commit();
			// s.close();
			// System.out.println("DONE WITH BATCH 1");
		} catch (SQLException e) {
			e.printStackTrace();
		}
		// Insert Stars

		tmp = new StringBuilder("INSERT INTO stars (first_name,last_name) VALUES ");
		Iterator stars = myActors.iterator();
		if (stars.hasNext()) {

			Star actor = (Star) stars.next();

			tmp.append("('" + actor.getFirst_name() + "','" + actor.getLast_name() + "')");
		}

		while (stars.hasNext()) {
			Star actor = (Star) stars.next();

			tmp.append("," + "('" + actor.getFirst_name() + "','" + actor.getLast_name() + "')");

		}
		tmp.append(";");
		// System.out.println(tmp);
		s.addBatch(tmp.toString());
		try {
			s.executeBatch();
			connection.commit();
			// s.close();
			// System.out.println("DONE WITH BATCH 1");
		} catch (SQLException e) {
			e.printStackTrace();
		}

		// Insert Stars
		// // java.sql.Statement s2 = connection.createStatement();
		// Iterator stars = myActors.iterator();
		// while (stars.hasNext()) {
		// Star actor = (Star) stars.next();
		// String[] specialS = { "first_name", "last_name" };
		// // actor.setFirst_name(actor.getFirst_name().replace("\\",
		// // "").replace("\'", "\'\'"));
		// // actor.setLast_name(actor.getLast_name().replace("\\",
		// // "").replace("\'", "\'\'"));
		// String[] vals = { actor.getFirst_name(), actor.getLast_name() };
		//
		// tmp = "";
		//
		// if (actor.getFirst_name() == null || actor.getFirst_name() == null ||
		// actor.getFirst_name().equals("")
		// || actor.getFirst_name().equals("")) {
		//
		// actor.setFirst_name("");
		// }
		// tmp = "INSERT INTO " + tblName[1] + " (" + specialS[0] + "," +
		// specialS[1] + ")" + " SELECT '" + vals[0]
		// + "','" + vals[1] + "' WHERE NOT EXISTS(SELECT * FROM " + tblName[1]
		// + " WHERE " + specialS[0]
		// + "='" + vals[0] + "' AND " + specialS[1] + "='" + vals[1] + "');";
		//
		// s.addBatch(tmp);
		//
		// }
		// try {
		// s.executeBatch();
		// connection.commit();
		// s.close();
		// System.out.println("DONE WITH BATCH 2");
		// } catch (SQLException e) {
		// e.printStackTrace();
		// }
		// Now making a map of the IDs
		connection.setAutoCommit(true);

		HashMap<String, Integer> movieToId = new HashMap<String, Integer>();
		HashMap<String, Integer> actorToId = new HashMap<String, Integer>();
		HashMap<String, Integer> genresToId = new HashMap<String, Integer>();
		java.sql.Statement select = connection.createStatement();

		ResultSet result = (ResultSet) select.executeQuery("SELECT * FROM movies m");
		while (result.next()) {
			String key = result.getString(2) + result.getString(4);
			int value = result.getInt(1);
			movieToId.put(key, value);

		}
		result = (ResultSet) select.executeQuery("SELECT * FROM stars");
		while (result.next()) {
			String key = result.getString(2) +" "+ result.getString(3);
			int value = result.getInt(1);
			actorToId.put(key, value);

		}
		result = (ResultSet) select.executeQuery("SELECT * FROM genres");
		while (result.next()) {
			String key = result.getString(2);
			int value = result.getInt(1);
			genresToId.put(key, value);

		}
		//
		connection.setAutoCommit(false);
		// END THE MAP
		//
		StringBuilder tmpS = new StringBuilder((String) ("INSERT INTO stars_in_movies VALUES "));
		int itAmt=0;
		
//		    while (it.hasNext()) {
//		        Map.Entry pair = (Map.Entry)it.next();
//		        System.out.println(pair.getKey() + " = " + pair.getValue());
//		        pair.getValue();
//		        
//		        for(String anActor:pair.getValue())
//		        {}
////		        	tmpS.append(" ("+actorToId.get()+")");
//		        it.remove(); // avoids a ConcurrentModificationException
//		    }
		   
		    
		    for (Map.Entry<String, List> entry : movieToActors.entrySet()) {
		    	 
		    	 System.out.println("ID of Movie = " + entry.getKey() + ", I = " + entry.getValue());
		    	System.out.println("POPO");
		    	
		    	for(Object actors:entry.getValue())
		    	{
		    		String fn="";
		    		String ln="";
		    		String[] splitName=actors.toString().split("\\s+");
		    		if(splitName.length==1)
		    		{}
		    		
		    		
//		    		System.out.println("I = " + movieToId.get(entry.getKey()) + ", ID of Actor = " + actorToId.get(actors));
		    		if(movieToId.get(entry.getKey())!=null && actorToId.get(actors)!=null)
		    		{
		    			if(itAmt++>0)
			    		{
		    				tmpS.append(", ");
			    		}
		    			tmpS.append("("+")");
		    		}
//		    		System.out.println(actors);
		    	}
		    }
		
		
	}// END PARSE

	private void printMovieStarData() {

		System.out.println(movieToActors);
		// for(Object actors: movieActors.values())
		// {
		// System.out.println(actors);
		// }
	}

	private void parseMovieStarDocument() {
		// TODO Auto-generated method stub
		// get a factory
		SAXParserFactory spf = SAXParserFactory.newInstance();
		try {

			// get a new instance of parser
			SAXParser sp = spf.newSAXParser();

			// parse the file and also register this class for call backs
			// sp.parse("employees.xml", this);
			sp.parse("casts124.xml", this);

		} catch (SAXException se) {
			se.printStackTrace();
		} catch (ParserConfigurationException pce) {
			pce.printStackTrace();
		} catch (IOException ie) {
			ie.printStackTrace();
		}
	}

	private void parseStarDocument() {

		// get a factory
		SAXParserFactory spf = SAXParserFactory.newInstance();
		try {

			// get a new instance of parser
			SAXParser sp = spf.newSAXParser();

			// parse the file and also register this class for call backs
			// sp.parse("employees.xml", this);
			sp.parse("actors63.xml", this);

		} catch (SAXException se) {
			se.printStackTrace();
		} catch (ParserConfigurationException pce) {
			pce.printStackTrace();
		} catch (IOException ie) {
			ie.printStackTrace();
		}
	}

	private void parseMovieDocument() {

		// get a factory
		SAXParserFactory spf = SAXParserFactory.newInstance();
		try {

			// get a new instance of parser
			SAXParser sp = spf.newSAXParser();

			// parse the file and also register this class for call backs
			// sp.parse("employees.xml", this);
			sp.parse("mains243.xml", this);

		} catch (SAXException se) {
			se.printStackTrace();
		} catch (ParserConfigurationException pce) {
			pce.printStackTrace();
		} catch (IOException ie) {
			ie.printStackTrace();
		}
	}

	private void printStarData() {

		@SuppressWarnings("rawtypes")
		// Iterator it = myMovies.iterator();
		Iterator it = myActors.iterator();
		while (it.hasNext()) {
			try {

				System.out.println(it.next().toString());
			} catch (NullPointerException e) {
				e.printStackTrace();
				// System.out.println("Nothing Found");
			}
		}
		System.out.println("\nNo of Actors '" + myActors.size() + "'.");
		System.out.println("\nBadly Formatted A Found: '" + myBadActors.size() + "'\n");

	}

	/**
	 * Iterate through the list and print the contents
	 */
	private void printMovieData() {

		System.out.println("No of Movies '" + myMovies.size() + "'.");
		System.out.println("\nBadly Formatted Movies Found: '" + myBadMovies.size() + "'\n");
		@SuppressWarnings("rawtypes")
		// Iterator it = myMovies.iterator();
		Iterator it = myBadMovies.iterator();
		while (it.hasNext()) {
			try {

				System.out.println(it.next().toString());
			} catch (NullPointerException e) {
				e.printStackTrace();
				// System.out.println("Nothing Found");
			}
		}

		System.out.println("All the Genres Found:");
		System.out.println(genres);
	}

	// Event Handlers
	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
		// reset
		tempVal = "";
		if (qName.equalsIgnoreCase("film")) {
			// create a new instance of employee
			tempMovie = new Movie();
			// tempMovie.setType(attributes.getValue("type"));
		} else if (qName.equalsIgnoreCase("actor")) {
			// create a new instance of employee
			tempStar = new Star();
			// tempMovie.setType(attributes.getValue("type"));
		}

	}

	public void characters(char[] ch, int start, int length) throws SAXException {
		tempVal = new String(ch, start, length);
	}

	public void endElement(String uri, String localName, String qName) throws SAXException {
		/*
		 * id:integer (primary key) title:varchar(100) year:integer
		 * director:varchar(100) banner_url:varchar(200)
		 * trailer_url:varchar(200)
		 */
		tempVal = tempVal.replaceAll("\\*", " ").replace("\\", "").replace("\'", "\'\'");

		// tempVal=tempVal.replaceAll("'''", "''");
		if (qName.equalsIgnoreCase("film")) {
			// add it to the list
			myMovies.add(tempMovie);
			if (tempMovie.getYear() == -404)
				myBadMovies.add(tempMovie);

		} else if (qName.equalsIgnoreCase("fid")) {
			try {
				tempMovie.setId(Integer.parseInt(tempVal));
			} catch (NumberFormatException e) {
				// tempMovie.setId((tempVal.hashCode()));
				tempMovie.setId(-1);

			}
		} else if (qName.equalsIgnoreCase("t")) {
			tempMovie.setTitle(tempVal);
			// System.out.println(tempVal);
		} else if (qName.equalsIgnoreCase("year")) {
			try {
				tempMovie.setYear(Integer.parseInt(tempVal));
			} catch (NumberFormatException e) {
				// We will set the year to -404 in order to save the data (It
				// can be fixed later by employees)
				tempMovie.setYear(-404);
			}
		}

		else if (qName.equalsIgnoreCase("cat")) {
			genres.add(tempVal);
			catInMovies.add(tempVal);
		} else if (qName.equalsIgnoreCase("dirn")) {
			tempMovie.setDirector(tempVal);
		} else if (qName.equalsIgnoreCase("cats")) {
			tempMovie.setCats(catInMovies);
			catInMovies = new ArrayList<>();
		} else if (qName.equalsIgnoreCase("t")) {
			movie = tempVal;
			// System.out.println(movie);

		}
		/// THE ACTOR
		/*
		 * id:integer (primary key) title:varchar(100) year:integer
		 * director:varchar(100) banner_url:varchar(200)
		 * trailer_url:varchar(200)
		 */
		///
		if (qName.equalsIgnoreCase("actor")) {
			// add it to the list
			if ((tempStar.getFirst_name() != null && !tempStar.getFirst_name().equals(""))
					|| (tempStar.getLast_name() != null && !tempStar.getLast_name().equals("")))
				myActors.add(tempStar);
			// if(tempStar.getYear()==-404)
			// myBadActors.add(tempStar);

		} else if (qName.equalsIgnoreCase("familyname")) {
			try {
				tempStar.setLast_name(tempVal);
			} catch (NumberFormatException e) {
				tempStar.setId((tempVal.hashCode()));

			}
		} else if (qName.equalsIgnoreCase("firstname")) {
			try {
				tempStar.setFirst_name(tempVal);
			} catch (NumberFormatException e) {
				tempStar.setId((tempVal.hashCode()));

			}
		}
		// THE Movie actor relations

		//
		else if (qName.equalsIgnoreCase("t")) {
			movie = tempVal;

		} else if (qName.equalsIgnoreCase("a")) {
			actorsIn.add(tempVal);

		} else if (qName.equalsIgnoreCase("filmc")) {
			// System.out.println(actorsIn);
			movieToActors.put(movie + tmpDirector, actorsIn);
			actorsIn = new ArrayList();

		} else if (qName.equalsIgnoreCase("is")) {
			// System.out.println(actorsIn);
			tmpDirector = tempVal;
			// System.out.println(tmpDirector);

		}

	}

	public static void main(String[] args) {
		SaxParserMain spe = new SaxParserMain();
		spe.runMovies();

	}

}
